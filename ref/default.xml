<?xml version="1.0" encoding="UTF-8" ?>

<manifest>
    <!-- 
    remote: 远程代码库配置
    name: 远程仓库名，在使用 git clone 时默认为 origin
    fetch: 远程仓库地址，用户和 project 节点中的 name 一起确定项目地址
    -->
    <!-- remote server -->
    <remote
        name="github"
        fetch="https://github.com" />
    <remote
        name="rx"
        fetch="https://github.com/ReactiveX" />
    <remote
        name="square"
        fetch="https://github.com/square" />
    
    <!--
    default: 默认配置
    remote: 默认使用的远程仓库
    revision: 默认使用的分支
    sync-j: 同步代码时的并发数
    -->
    <default
        remote="github"
        revision="master"
        sync-j="1" />

    <!--
    project: 单个代码库配置
    name: 项目地址，和指定的 remote 节点中的 fetch 一起组成仓库地址（fetch + name）
    group: 项目所属分组，可选
    path: 项目拉取到本地后所在目录
    remote: 指定所在远程仓库
    revision: 指定代码分支
    -->
    <!-- RxJava -->
    <project
        name="RxJava"
        group="android,rx"
        path="lib/RxJava"
        remote="rx"
        revision="2.x" />
    <!-- RxAndroid -->
    <project
        name="RxAndroid"
        group="android,rx"
        path="lib/RxAndroid"
        remote="rx"
        revision="2.x" />

    <!-- OkHttp -->
    <project
        name="okhttp"
        group="android,square"
        path="lib/OkHttp"
        remote="square" />

    <!-- LeakCanary -->
    <project
        name="leakcanary"
        group="android,square"
        path="lib/LeakCanary"
        remote="square" />

    <!-- Retrofit -->
    <project
        name="retrofit"
        group="android,square"
        path="lib/Retrofit"
        remote="square" />

    <!-- Glide -->
    <project
        name="bumptech/glide"
        group="android,bumptech"
        path="lib/Glide"/>

    <!-- Volley -->
    <project
        name="google/volley"
        group="android,google"
        path="lib/Volley"/>
</manifest>

<!--
    remote: 可以配置多个，一个项目清单中的代码可以来自不同的服务器
    project：必须包含name和path属性，name用于制定远程仓库的位置，path制定下载后的代码相对路径
    project中path可以很好的组织本地目录结构
-->